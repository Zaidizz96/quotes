/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package quotes;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;
import com.google.gson.reflect.TypeToken;
import org.junit.jupiter.api.Test;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.lang.reflect.Type;
import java.util.*;

import static org.junit.jupiter.api.Assertions.*;

class AppTest {

    @Test
    void parsingTest() {
        BufferedReader bufferedReader = null;
        try {
            ClassLoader classLoader = getClass().getClassLoader();
            File file = new File(classLoader.getResource("recentquotes.json").getFile());
            bufferedReader = new BufferedReader(new FileReader(file));

            Gson gson = new Gson();
            Type qouteType = new TypeToken<ArrayList<Quote>>() {
            }.getType();
            ArrayList<Quote> quoteList = gson.fromJson(bufferedReader, qouteType);

            assertNotNull(quoteList);

        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            if (bufferedReader != null) {
                try {
                    bufferedReader.close();
                } catch (IOException e) {
                    throw new RuntimeException(e);
                }
            }
        }
    }

    @Test
    public void testDisplay_Random_Quotes_OnEachRun() {
        String previousQuote = null;
        String currentQuote = "";
        ClassLoader classLoader = getClass().getClassLoader();
        File file = new File(classLoader.getResource("recentquotes.json").getFile());

        for (int i = 0; i < 10; i++) {
            currentQuote = QuoteMapper.getDisplayedQuote(file);

            // Add more information to the assertion message
            if (previousQuote != null) {
                assertNotEquals(
                        "Quotes are not different (iteration " + i + " and " + (i + 1) + ")",
                        previousQuote,
                        currentQuote
                );
            }

            previousQuote = currentQuote;
        }
    }

    @Test
    public void testGetRandomNumber() {
        int min = 1;
        int max = 10;
        int randomNum = QuoteMapper.getRandomNumber(min, max);
        assertTrue(randomNum >= min && randomNum < max);
    }

    @Test
    public void testGetRandomQuote() throws IOException {
        String url = "https://api.quotable.io/random";
        QuotableClient client = new QuotableClient();
        RandomQuoteAPI randomQuoteAPI = client.getQuote(url);

        assertNotNull(randomQuoteAPI);
    }

    @Test
    public void testGet_Quote_When_Api_Connection_Failed(){
        String testUrl = "httpsadasdasdsquotablasdsae.ioasdasdsasd/random"; // make url fail

        // this method used to get random api quote based on valid url .
        assertNotNull(QuoteMapper.addRandomQuote(testUrl));
    }


    @Test
    public void testApiQuoteSavedLocally() throws IOException {
        String apiQuote = QuoteMapper.addRandomQuote("https://api.quotable.io/random");
        assertNotNull(apiQuote); // Verify that the API quote response is not null

        String localQuote = QuoteMapper.getDisplayedQuote(new File("app/src/main/resources/recentquotes.json"));
        assertNotNull(localQuote); // Verify that the local quote response is not null

        assertTrue(localQuote.contains(apiQuote)); // Verify that API quote is in local quotes
    }
}